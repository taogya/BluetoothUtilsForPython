# Generated by Django 4.2.2 on 2023-06-15 04:21

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import macaddress.fields
import regex_field.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BleScanDevice',
            fields=[
                ('mac_addr', macaddress.fields.MACAddressField(help_text='12:34:56:78:90:AB', integer=True, primary_key=True, serialize=False, verbose_name='mac address')),
                ('note', models.CharField(blank=True, default=None, help_text='device id/name/etc...', max_length=256, null=True, verbose_name='note')),
            ],
            options={
                'db_table': 'django_bleak_blescandevice',
            },
        ),
        migrations.CreateModel(
            name='BleScanEvent',
            fields=[
                ('name', models.CharField(help_text='ScanEvent001', max_length=32, primary_key=True, serialize=False, verbose_name='event name')),
                ('is_enabled', models.BooleanField(default=False, help_text='default False', verbose_name='is scan enabled')),
                ('pid', models.IntegerField(default=None, help_text='null is no operating', null=True, verbose_name='pid')),
                ('interval', models.FloatField(default=3.0, help_text='default 3.000[sec], 0.0 is not monitored', validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='monitoring interval of is_enabled [sec]')),
            ],
            options={
                'db_table': 'django_bleak_blescanevent',
            },
        ),
        migrations.CreateModel(
            name='BleScanFilter',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('note', models.CharField(blank=True, default=None, help_text='filter id/name/etc...', max_length=256, null=True, verbose_name='note')),
                ('is_enabled', models.BooleanField(default=True, help_text='default True', verbose_name='is filter enabled')),
                ('mac_addr', macaddress.fields.MACAddressField(blank=True, default=None, help_text='12:34:56:78:90:AB', integer=True, null=True, verbose_name='mac address')),
                ('local_name', models.CharField(blank=True, default=None, help_text='device-001', max_length=256, null=True, verbose_name='local name')),
                ('company_code', models.IntegerField(default=None, help_text='0xFFFF', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(65535)], verbose_name='company code')),
                ('manufacturer_data', regex_field.fields.RegexField(blank=True, help_text='^626C65(34|35)2E30$', max_length=1024, null=True, verbose_name='regex of manufacturer_data')),
                ('service_uuid', models.UUIDField(default=None, help_text='01234567-0123-0123-0123-0123456789AB', null=True, verbose_name='service uuid')),
                ('service_data', regex_field.fields.RegexField(blank=True, help_text='^626C65(34|35)2E30$', max_length=1024, null=True, verbose_name='regex of service_data')),
                ('rssi_min', models.IntegerField(default=-100, help_text='default -100[dBm]', validators=[django.core.validators.MinValueValidator(-100), django.core.validators.MaxValueValidator(0)], verbose_name='rssi min[dBm]')),
                ('rssi_max', models.IntegerField(default=0, help_text='default 0[dBm]', validators=[django.core.validators.MinValueValidator(-100), django.core.validators.MaxValueValidator(0)], verbose_name='rssi max[dBm]')),
            ],
            options={
                'db_table': 'django_bleak_blescanfilter',
            },
        ),
        migrations.CreateModel(
            name='BleScanResult',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('received_at', models.DateTimeField(verbose_name='received datetime')),
                ('local_name', models.CharField(blank=True, default=None, max_length=256, null=True, verbose_name='local name')),
                ('company_code', models.IntegerField(default=None, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(65535)], verbose_name='company code')),
                ('manufacturer_data', models.BinaryField(default=None, max_length=256, null=True, verbose_name='manufacturer data')),
                ('service_uuid', models.UUIDField(default=None, null=True, verbose_name='service uuid')),
                ('service_data', models.BinaryField(default=None, max_length=256, null=True, verbose_name='service data')),
                ('tx_power', models.FloatField(default=None, null=True, verbose_name='rssi[dB]')),
                ('rssi', models.FloatField(verbose_name='rssi[dB]')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_bleak.blescandevice', verbose_name='relational device')),
            ],
            options={
                'db_table': 'django_bleak_blescanresult',
                'indexes': [models.Index(fields=['device', 'company_code'], name='bsr_dev_com_idx'), models.Index(fields=['device', 'service_uuid'], name='bsr_dev_ser_idx'), models.Index(fields=['device', 'received_at'], name='bsr_dev_rec_idx'), models.Index(fields=['device', 'received_at', 'company_code'], name='bsr_dev_rec_com_idx'), models.Index(fields=['device', 'received_at', 'service_uuid'], name='bsr_dev_rec_ser_idx')],
            },
        ),
    ]
